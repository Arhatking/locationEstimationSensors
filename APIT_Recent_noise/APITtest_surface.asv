function [TableNodesOutside, TableNodesInside, Estimatedcoord_density, InOut_realinside, InOut_realoutside, Endprogram]=APITtest_surface(X,Audibleanchors,RSS_noise,Neighborhood,Indices,H,dth_RSS_Neighborhood)

global M N 
[m n]=size(Audibleanchors);
Anchorstriangle=zeros(1,3);
TableNodesInside=[];
TableNodesOutsidetemp=[];
CombinationTriangles=[];
Nodeswecanestimate=[];
Estimatedcoord_density=[];
InOut_realinside=[];
InOut_realoutside=[];
%Counters
Anchorscounter=0;
temp=1;
conti=1; %Used for tables using RF profile
conto=1; %Used for tables using RF profile
est=1; %Used for the estimated positions through RFprofile
reali=1; %Used for real tables inside/outside
realo=1;
%X2 is going to have the same columns as X plus a third column of zeros in
%order to be feasible to operate w. cross

X2=X;
[Xsizex Xsizey]=size(X);
X2(:,3)=zeros(Xsizex,1);

%H1 is going to have the same columns as H plus a third column of zeros in
%order to be feasible to operate w. cross.

H1=H;
[Hsizex Hsizey]=size(H);
H1(:,3)=zeros(Hsizex,1);

for i=1:(M+N) %M+N
    %Check out progress of the simulation w/ the number of Target node
    %Only consider target nodes, not anchors  (if 1= mean that it is not an
    %anchor node, it is a target node), and it should check that the target
    %node is a node considered in the Neighborhood, in order to avoid
    %problems with bounds of Index
    if (isempty(find(Indices==i))==1)  & (isempty(find(Neighborhood(:,1)==i))==0) 
        Anchorstriangle=[];
        fprintf(1,'--Making RSS comparisons for Target Node %d\n',i);
        for j=1:m        
            if i==Audibleanchors(j,1) %Format of audibleanchors: audibleanchors(targetnode,anchor) we want the first column
                Anchorscounter=Anchorscounter+1;
                Anchorstriangle(temp)=Audibleanchors(j,2); %We want the anchor
                temp=temp+1;
            end
        end
        %To fix the size of the anchorstriangle array and prevent bugs
        limit_anchors=temp-1;
        temp=1;
        if Anchorscounter>=3
            %If number of anchors>=3 then we should form a triangle between the
            %anchors
            CombinationTriangles=[];
            CombinationTriangles=nchoosek(Anchorstriangle(1:limit_anchors),3); %Combinations=nchoosek(n,k)
            [u v]=size(CombinationTriangles);
            for SetofAnchors=1:u %size of CombinationTriangles
                %Check if it is Inside of a triangle or outside of a
                %triangle in the real sense
                %Sacar coordenadas de los anchors
                %X(CombinationTriangles(SetofAnchors,1),:),X(CombinationTrian
                %gles(SetofAnchors,2),:),X(CombinationTriangles(SetofAnchors,
                %3),:)-> llamar distancias d1,d2,d3
                d1=pdist([X(CombinationTriangles(SetofAnchors,1),:); X(CombinationTriangles(SetofAnchors,2),:)]);
                d2=pdist([X(CombinationTriangles(SetofAnchors,2),:); X(CombinationTriangles(SetofAnchors,3),:)]);
                d3=pdist([X(CombinationTriangles(SetofAnchors,3),:); X(CombinationTriangles(SetofAnchors,1),:)]);
            end
        end
    end 
    Anchorscounter=0;
end
